{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17","program":"/Users/bayramlcm/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","futures_sink","--edition=2018","/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=611436cb43e52f67","-C","extra-filename=-611436cb43e52f67","--out-dir","/Users/bayramlcm/Documents/projects/blockchain/holochain/holome/cc_tuts/zomes/hello/code/target/rls/debug/deps","-L","dependency=/Users/bayramlcm/Documents/projects/blockchain/holochain/holome/cc_tuts/zomes/hello/code/target/rls/debug/deps","--extern","futures_core=/Users/bayramlcm/Documents/projects/blockchain/holochain/holome/cc_tuts/zomes/hello/code/target/rls/debug/deps/libfutures_core-163882f3c89acee7.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/bayramlcm/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/bayramlcm/Documents/projects/blockchain/holochain/holome/cc_tuts/zomes/hello/code/target/rls/debug/deps/libfutures_sink-611436cb43e52f67.rmeta"},"prelude":{"crate_id":{"name":"futures_sink","disambiguator":[4064676001669457349,179703436309919623]},"crate_root":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src","external_crates":[{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12669636623235690034,8759211680751900309]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5693088722327716739,2147858288623464010]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15524063101320593432,10022011492683157993]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14556973752653035032,10499433159243229334]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[1934112228416746928,18062520869078565162]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[18272308394612376465,2983342869845535113]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7982440001281678496,5082264322901945876]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17333179571007866912,15310387900280001912]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[17767206385810259554,6284392829264960128]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[6917085151040958166,7936695879549379973]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[14883612992525439991,13188753928230923968]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[8362867231865330830,11957228790523419708]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13374155178358367403,7714447127929209529]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7401024017757537210,13419518921059338139]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","num":15,"id":{"name":"futures_core","disambiguator":[10829633010863303161,12976473036813324988]}}],"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":0,"byte_end":9228,"line_start":1,"line_end":230,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":0,"byte_end":9228,"line_start":1,"line_end":230,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":16},{"krate":0,"index":24},{"krate":0,"index":32}],"decl_id":null,"docs":" Asynchronous sinks","sig":null,"attributes":[{"value":"! Asynchronous sinks","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":23,"byte_end":26,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This crate contains the `Sink` trait which allows values to be sent","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":27,"byte_end":98,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"! asynchronously.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":99,"byte_end":118,"line_start":4,"line_end":4,"column_start":1,"column_end":20}},{"value":"warn(missing_docs, missing_debug_implementations, rust_2018_idioms,\n       unreachable_pub)","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":163,"byte_end":251,"line_start":7,"line_end":7,"column_start":1,"column_end":89}},{"value":"warn(clippy :: all)","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":419,"byte_end":440,"line_start":10,"line_end":10,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":9},"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2069,"byte_end":2073,"line_start":50,"line_end":50,"column_start":11,"column_end":15},"name":"Sink","qualname":"::Sink","value":"Sink<Item>","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15}],"decl_id":null,"docs":" A `Sink` is a value into which other values can be sent, asynchronously.","sig":null,"attributes":[{"value":"/ A `Sink` is a value into which other values can be sent, asynchronously.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":778,"byte_end":854,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":855,"byte_end":858,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Basic examples of sinks include the sending side of:","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":859,"byte_end":915,"line_start":25,"line_end":25,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":916,"byte_end":919,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ - Channels","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":920,"byte_end":934,"line_start":27,"line_end":27,"column_start":1,"column_end":15}},{"value":"/ - Sockets","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":935,"byte_end":948,"line_start":28,"line_end":28,"column_start":1,"column_end":14}},{"value":"/ - Pipes","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":949,"byte_end":960,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":961,"byte_end":964,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ In addition to such \"primitive\" sinks, it's typical to layer additional","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":965,"byte_end":1040,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ functionality, such as buffering, on top of an existing sink.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":1041,"byte_end":1106,"line_start":32,"line_end":32,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":1107,"byte_end":1110,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Sending to a sink is \"asynchronous\" in the sense that the value may not be","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":1111,"byte_end":1189,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ sent in its entirety immediately. Instead, values are sent in a two-phase","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":1190,"byte_end":1267,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ way: first by initiating a send, and then by polling for completion. This","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":1268,"byte_end":1345,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/ two-phase setup is analogous to buffered writing in synchronous code, where","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":1346,"byte_end":1425,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ writes often succeed immediately, but internally are buffered and are","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":1426,"byte_end":1499,"line_start":38,"line_end":38,"column_start":1,"column_end":74}},{"value":"/ *actually* written only upon flushing.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":1500,"byte_end":1542,"line_start":39,"line_end":39,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":1543,"byte_end":1546,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ In addition, the `Sink` may be *full*, in which case it is not even possible","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":1547,"byte_end":1627,"line_start":41,"line_end":41,"column_start":1,"column_end":81}},{"value":"/ to start the sending process.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":1628,"byte_end":1661,"line_start":42,"line_end":42,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":1662,"byte_end":1665,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ As with `Future` and `Stream`, the `Sink` trait is built from a few core","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":1666,"byte_end":1742,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ required methods, and a host of default methods for working in a","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":1743,"byte_end":1811,"line_start":45,"line_end":45,"column_start":1,"column_end":69}},{"value":"/ higher-level way. The `Sink::send_all` combinator is of particular","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":1812,"byte_end":1882,"line_start":46,"line_end":46,"column_start":1,"column_end":71}},{"value":"/ importance: you can use it to send an entire stream to a sink, which is","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":1883,"byte_end":1958,"line_start":47,"line_end":47,"column_start":1,"column_end":76}},{"value":"/ the simplest way to ultimately consume a stream.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":1959,"byte_end":2011,"line_start":48,"line_end":48,"column_start":1,"column_end":53}},{"value":"must_use = \"sinks do nothing unless polled\"","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2012,"byte_end":2058,"line_start":49,"line_end":49,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":11},"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2160,"byte_end":2165,"line_start":52,"line_end":52,"column_start":10,"column_end":15},"name":"Error","qualname":"::Sink::Error","value":"type Error;","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" The type of value produced by the sink when an error occurs.\n","sig":null,"attributes":[{"value":"/ The type of value produced by the sink when an error occurs.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2086,"byte_end":2150,"line_start":51,"line_end":51,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2766,"byte_end":2776,"line_start":66,"line_end":66,"column_start":8,"column_end":18},"name":"poll_ready","qualname":"::Sink::poll_ready","value":"fn (self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Attempts to prepare the `Sink` to receive a value.","sig":null,"attributes":[{"value":"/ Attempts to prepare the `Sink` to receive a value.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2172,"byte_end":2226,"line_start":54,"line_end":54,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2231,"byte_end":2234,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ This method must be called and return `Poll::Ready(Ok(()))` prior to","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2239,"byte_end":2311,"line_start":56,"line_end":56,"column_start":5,"column_end":77}},{"value":"/ each call to `start_send`.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2316,"byte_end":2346,"line_start":57,"line_end":57,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2351,"byte_end":2354,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ This method returns `Poll::Ready` once the underlying sink is ready to","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2359,"byte_end":2433,"line_start":59,"line_end":59,"column_start":5,"column_end":79}},{"value":"/ receive data. If this method returns `Poll::Pending`, the current task","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2438,"byte_end":2512,"line_start":60,"line_end":60,"column_start":5,"column_end":79}},{"value":"/ is registered to be notified (via `cx.waker().wake_by_ref()`) when `poll_ready`","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2517,"byte_end":2600,"line_start":61,"line_end":61,"column_start":5,"column_end":88}},{"value":"/ should be called again.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2605,"byte_end":2632,"line_start":62,"line_end":62,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2637,"byte_end":2640,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ In most cases, if the sink encounters an error, the sink will","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2645,"byte_end":2710,"line_start":64,"line_end":64,"column_start":5,"column_end":70}},{"value":"/ permanently be unable to receive items.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2715,"byte_end":2758,"line_start":65,"line_end":65,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":3976,"byte_end":3986,"line_start":87,"line_end":87,"column_start":8,"column_end":18},"name":"start_send","qualname":"::Sink::start_send","value":"fn (self: Pin<&mut Self>, item: Item) -> Result<(), Self::Error>","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Begin the process of sending a value to the sink.\n Each call to this function must be preceded by a successful call to\n `poll_ready` which returned `Poll::Ready(Ok(()))`.","sig":null,"attributes":[{"value":"/ Begin the process of sending a value to the sink.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2860,"byte_end":2913,"line_start":68,"line_end":68,"column_start":5,"column_end":58}},{"value":"/ Each call to this function must be preceded by a successful call to","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2918,"byte_end":2989,"line_start":69,"line_end":69,"column_start":5,"column_end":76}},{"value":"/ `poll_ready` which returned `Poll::Ready(Ok(()))`.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":2994,"byte_end":3048,"line_start":70,"line_end":70,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":3053,"byte_end":3056,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ As the name suggests, this method only *begins* the process of sending","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":3061,"byte_end":3135,"line_start":72,"line_end":72,"column_start":5,"column_end":79}},{"value":"/ the item. If the sink employs buffering, the item isn't fully processed","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":3140,"byte_end":3215,"line_start":73,"line_end":73,"column_start":5,"column_end":80}},{"value":"/ until the buffer is fully flushed. Since sinks are designed to work with","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":3220,"byte_end":3296,"line_start":74,"line_end":74,"column_start":5,"column_end":81}},{"value":"/ asynchronous I/O, the process of actually writing out the data to an","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":3301,"byte_end":3373,"line_start":75,"line_end":75,"column_start":5,"column_end":77}},{"value":"/ underlying object takes place asynchronously. **You *must* use","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":3378,"byte_end":3444,"line_start":76,"line_end":76,"column_start":5,"column_end":71}},{"value":"/ `poll_flush` or `poll_close` in order to guarantee completion of a","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":3449,"byte_end":3519,"line_start":77,"line_end":77,"column_start":5,"column_end":75}},{"value":"/ send**.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":3524,"byte_end":3535,"line_start":78,"line_end":78,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":3540,"byte_end":3543,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Implementations of `poll_ready` and `start_send` will usually involve","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":3548,"byte_end":3621,"line_start":80,"line_end":80,"column_start":5,"column_end":78}},{"value":"/ flushing behind the scenes in order to make room for new messages.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":3626,"byte_end":3696,"line_start":81,"line_end":81,"column_start":5,"column_end":75}},{"value":"/ It is only necessary to call `poll_flush` if you need to guarantee that","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":3701,"byte_end":3776,"line_start":82,"line_end":82,"column_start":5,"column_end":80}},{"value":"/ *all* of the items placed into the `Sink` have been sent.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":3781,"byte_end":3842,"line_start":83,"line_end":83,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":3847,"byte_end":3850,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ In most cases, if the sink encounters an error, the sink will","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":3855,"byte_end":3920,"line_start":85,"line_end":85,"column_start":5,"column_end":70}},{"value":"/ permanently be unable to receive items.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":3925,"byte_end":3968,"line_start":86,"line_end":86,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4679,"byte_end":4689,"line_start":102,"line_end":102,"column_start":8,"column_end":18},"name":"poll_flush","qualname":"::Sink::poll_flush","value":"fn (self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Flush any remaining output from this sink.","sig":null,"attributes":[{"value":"/ Flush any remaining output from this sink.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4072,"byte_end":4118,"line_start":90,"line_end":90,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4123,"byte_end":4126,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Returns `Poll::Ready(Ok(()))` when no buffered items remain. If this","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4131,"byte_end":4203,"line_start":92,"line_end":92,"column_start":5,"column_end":77}},{"value":"/ value is returned then it is guaranteed that all previous values sent","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4208,"byte_end":4281,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/ via `start_send` have been flushed.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4286,"byte_end":4325,"line_start":94,"line_end":94,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4330,"byte_end":4333,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ Returns `Poll::Pending` if there is more work left to do, in which","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4338,"byte_end":4408,"line_start":96,"line_end":96,"column_start":5,"column_end":75}},{"value":"/ case the current task is scheduled (via `cx.waker().wake_by_ref()`) to wake up when","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4413,"byte_end":4500,"line_start":97,"line_end":97,"column_start":5,"column_end":92}},{"value":"/ `poll_flush` should be called again.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4505,"byte_end":4545,"line_start":98,"line_end":98,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4550,"byte_end":4553,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ In most cases, if the sink encounters an error, the sink will","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4558,"byte_end":4623,"line_start":100,"line_end":100,"column_start":5,"column_end":70}},{"value":"/ permanently be unable to receive items.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4628,"byte_end":4671,"line_start":101,"line_end":101,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":5358,"byte_end":5368,"line_start":115,"line_end":115,"column_start":8,"column_end":18},"name":"poll_close","qualname":"::Sink::poll_close","value":"fn (self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>>","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Flush any remaining output and close this sink, if necessary.","sig":null,"attributes":[{"value":"/ Flush any remaining output and close this sink, if necessary.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4773,"byte_end":4838,"line_start":104,"line_end":104,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4843,"byte_end":4846,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Returns `Poll::Ready(Ok(()))` when no buffered items remain and the sink","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4851,"byte_end":4927,"line_start":106,"line_end":106,"column_start":5,"column_end":81}},{"value":"/ has been successfully closed.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4932,"byte_end":4965,"line_start":107,"line_end":107,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4970,"byte_end":4973,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Returns `Poll::Pending` if there is more work left to do, in which","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":4978,"byte_end":5048,"line_start":109,"line_end":109,"column_start":5,"column_end":75}},{"value":"/ case the current task is scheduled (via `cx.waker().wake_by_ref()`) to wake up when","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":5053,"byte_end":5140,"line_start":110,"line_end":110,"column_start":5,"column_end":92}},{"value":"/ `poll_close` should be called again.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":5145,"byte_end":5185,"line_start":111,"line_end":111,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":5190,"byte_end":5193,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ If this function encounters an error, the sink should be considered to","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":5198,"byte_end":5272,"line_start":113,"line_end":113,"column_start":5,"column_end":79}},{"value":"/ have failed permanently, and no more `Sink` methods should be called.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":5277,"byte_end":5350,"line_start":114,"line_end":114,"column_start":5,"column_end":78}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":6174,"byte_end":6177,"line_start":138,"line_end":138,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":7017,"byte_end":7020,"line_start":167,"line_end":167,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":7755,"byte_end":7763,"line_start":189,"line_end":189,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":8535,"byte_end":8538,"line_start":211,"line_end":211,"column_start":77,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":6174,"byte_end":6177,"line_start":138,"line_end":138,"column_start":30,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":2,"index":29418},"to":{"krate":0,"index":9}},{"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":7017,"byte_end":7020,"line_start":167,"line_end":167,"column_start":37,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":5,"index":4064},"to":{"krate":0,"index":9}},{"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":7755,"byte_end":7763,"line_start":189,"line_end":189,"column_start":45,"column_end":53},"kind":{"Impl":{"id":2}},"from":{"krate":5,"index":2419},"to":{"krate":0,"index":9}},{"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-sink-preview-0.3.0-alpha.17/src/lib.rs","byte_start":8535,"byte_end":8538,"line_start":211,"line_end":211,"column_start":77,"column_end":80},"kind":{"Impl":{"id":3}},"from":{"krate":5,"index":84},"to":{"krate":0,"index":9}}]}