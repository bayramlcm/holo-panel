{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0","program":"/Users/bayramlcm/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","snowflake","/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=7bd979b175651863","-C","extra-filename=-7bd979b175651863","--out-dir","/Users/bayramlcm/Documents/projects/blockchain/holochain/holome/cc_tuts/zomes/hello/code/target/rls/debug/deps","-L","dependency=/Users/bayramlcm/Documents/projects/blockchain/holochain/holome/cc_tuts/zomes/hello/code/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/bayramlcm/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/bayramlcm/Documents/projects/blockchain/holochain/holome/cc_tuts/zomes/hello/code/target/rls/debug/deps/libsnowflake-7bd979b175651863.rmeta"},"prelude":{"crate_id":{"name":"snowflake","disambiguator":[8023527943279178322,17803192938773798275]},"crate_root":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src","external_crates":[{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12669636623235690034,8759211680751900309]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5693088722327716739,2147858288623464010]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15524063101320593432,10022011492683157993]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14556973752653035032,10499433159243229334]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[1934112228416746928,18062520869078565162]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[18272308394612376465,2983342869845535113]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7982440001281678496,5082264322901945876]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17333179571007866912,15310387900280001912]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[17767206385810259554,6284392829264960128]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[6917085151040958166,7936695879549379973]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[14883612992525439991,13188753928230923968]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[8362867231865330830,11957228790523419708]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13374155178358367403,7714447127929209529]}},{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7401024017757537210,13419518921059338139]}}],"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","byte_start":335,"byte_end":702,"line_start":9,"line_end":20,"column_start":1,"column_end":44}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":28},"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","byte_start":686,"byte_end":701,"line_start":20,"line_end":20,"column_start":28,"column_end":43},"alias_span":null,"name":"ProcessUniqueId","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","byte_start":335,"byte_end":702,"line_start":9,"line_end":20,"column_start":1,"column_end":44},"name":"","qualname":"::","value":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":23}],"decl_id":null,"docs":" A crate for quickly generating unique IDs with guaranteed properties.","sig":null,"attributes":[{"value":"! A crate for quickly generating unique IDs with guaranteed properties.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","byte_start":369,"byte_end":442,"line_start":10,"line_end":10,"column_start":1,"column_end":74}},{"value":"!","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","byte_start":443,"byte_end":446,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! This crate currently includes guaranteed process unique IDs but may include new ID types in the","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","byte_start":447,"byte_end":546,"line_start":12,"line_end":12,"column_start":1,"column_end":100}},{"value":"! future.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/lib.rs","byte_start":547,"byte_end":558,"line_start":13,"line_end":13,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":28},"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":3179,"byte_end":3194,"line_start":57,"line_end":57,"column_start":12,"column_end":27},"name":"ProcessUniqueId","qualname":"::process_unique_id::ProcessUniqueId","value":"ProcessUniqueId {  }","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30}],"decl_id":null,"docs":" Process unique IDs are guaranteed to be unique within the current process, for the lifetime of\n the current process.","sig":null,"attributes":[{"value":"/ Process unique IDs are guaranteed to be unique within the current process, for the lifetime of","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":1922,"byte_end":2020,"line_start":39,"line_end":39,"column_start":1,"column_end":99}},{"value":"/ the current process.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":2021,"byte_end":2045,"line_start":40,"line_end":40,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":2046,"byte_end":2049,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ 1. ID creation should be highly performant even on highly concurrent systems. It's MUCH faster","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":2050,"byte_end":2148,"line_start":42,"line_end":42,"column_start":1,"column_end":99}},{"value":"/    than using random/time based IDs (but, on the other hand, only unique within a process).","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":2149,"byte_end":2244,"line_start":43,"line_end":43,"column_start":1,"column_end":96}},{"value":"/ 2. While this crate can run out of process unique IDs, this is very unlikely assuming a sane","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":2245,"byte_end":2341,"line_start":44,"line_end":44,"column_start":1,"column_end":97}},{"value":"/    threading model and will panic rather than potentially reusing unique IDs.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":2342,"byte_end":2423,"line_start":45,"line_end":45,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":2424,"byte_end":2427,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Limits","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":2428,"byte_end":2440,"line_start":47,"line_end":47,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":2441,"byte_end":2444,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The unique ID's are `sizeof(usize) + 64` bits wide and are generated by combining a `usize`","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":2445,"byte_end":2540,"line_start":49,"line_end":49,"column_start":1,"column_end":96}},{"value":"/ global counter value with a 64bit thread local offset. This is important because each thread","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":2541,"byte_end":2637,"line_start":50,"line_end":50,"column_start":1,"column_end":97}},{"value":"/ that calls `new()` at least once will reserve at least 2^64 IDs. So, the only way to run out of","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":2638,"byte_end":2737,"line_start":51,"line_end":51,"column_start":1,"column_end":100}},{"value":"/ IDs in a reasonable amount of time is to run a 32bit system, spawn 2^32 threads, and claim one","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":2738,"byte_end":2836,"line_start":52,"line_end":52,"column_start":1,"column_end":99}},{"value":"/ ID on each thread. You might be able to do this on a 64bit system but it would take a while...","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":2837,"byte_end":2935,"line_start":53,"line_end":53,"column_start":1,"column_end":99}},{"value":"/ TL; DR: Don't create unique IDs from over 4 billion different threads on a 32bit system.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":2936,"byte_end":3028,"line_start":54,"line_end":54,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":3626,"byte_end":3629,"line_start":74,"line_end":74,"column_start":12,"column_end":15},"name":"new","qualname":"<ProcessUniqueId>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new unique ID.","sig":null,"attributes":[{"value":"/ Create a new unique ID.","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":3433,"byte_end":3460,"line_start":69,"line_end":69,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":3465,"byte_end":3468,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ **panics** if there are no more unique IDs available. If this happens, go home and","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":3473,"byte_end":3559,"line_start":71,"line_end":71,"column_start":5,"column_end":91}},{"value":"/ reevaluate your threading model!","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":3564,"byte_end":3600,"line_start":72,"line_end":72,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":3605,"byte_end":3614,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":3258,"byte_end":3273,"line_start":62,"line_end":62,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":3411,"byte_end":3426,"line_start":68,"line_end":68,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":4365,"byte_end":4380,"line_start":96,"line_end":96,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":3258,"byte_end":3273,"line_start":62,"line_end":62,"column_start":23,"column_end":38},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":28},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":3411,"byte_end":3426,"line_start":68,"line_end":68,"column_start":6,"column_end":21},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":28},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/bayramlcm/.cargo/registry/src/github.com-1ecc6299db9ec823/snowflake-1.3.0/src/process_unique_id.rs","byte_start":4365,"byte_end":4380,"line_start":96,"line_end":96,"column_start":18,"column_end":33},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":28},"to":{"krate":2,"index":1874}}]}